CHART NAME: {{ .Chart.Name  }}
CHART VERSION: {{ .Chart.Version  }}
APP VERSION: {{ .Chart.AppVersion  }}

** Please be patient while the chart is being deployed **

{{- if .Values.diagnosticMode.enabled }}
The chart has been deployed in diagnostic mode. All probes have been disabled and the command has been overwritten with:

  command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 4 }}
  args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 4 }}

Get the list of pods by executing:

  kubectl --namespace {{ template "common.names.namespace" . }} get pods -l app.kubernetes.io/instance={{ .Release.Name }}

Access the pod you want to debug by executing

  kubectl --namespace {{ template "common.names.namespace" . }} exec -ti <NAME OF THE POD> -- bash

In order to replicate the container startup scripts execute this command:

  /entrypoint.sh java -jar /app/app.jar

{{- else }}

Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ . }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl --namespace {{ template "common.names.namespace" . }} get services {{ template "common.names.fullname" . }} -o jsonpath="{.spec.ports[0].nodePort}")
  export NODE_IP=$(kubectl --namespace {{ template "common.names.namespace" . }} get nodes -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT/
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl --namespace {{ template "common.names.namespace" . }} get svc -w {{ template "common.names.fullname" . }}'
  export SERVICE_IP=$(kubectl --namespace {{ template "common.names.namespace" . }} get svc {{ template "common.names.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}/
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl --namespace {{ template "common.names.namespace" . }} get pods -l "app.kubernetes.io/name={{ template "common.names.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:1337/ to use your application"
  kubectl --namespace {{ template "common.names.namespace" . }} port-forward $POD_NAME 1337:{{ .Values.containerPorts.http }}
{{- end }}

{{- end }}

{{- include "common.warnings.rollingTag" .Values.image }}
{{- include "strapi.validateValues" . }}
