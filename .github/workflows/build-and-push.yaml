name: Build

on:
  push:
    branches:
      - 'main'
      - 'develop'
    tags:
      - '*'

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Get repository name and set env
        shell: bash
        run: set -x; echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get tag and set env
        run: set -x; echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Get Latest Tag
        id: latest_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 1.0.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Packages
        id: login-ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        env:
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --tag $IMAGE_NAME:$IMAGE_TAG \
            --file ./infra/docker/Dockerfile \
            --label "git.commit=${{ github.sha }}" \
            --label "git.tag=${{ env.RELEASE_VERSION }}" \
            --label "git.describe=`git describe --always --abbrev=8 --dirty`" \
            --label "build.timestamp=`date -u '+%Y-%m-%d %H:%M:%S %Z'`" \
            .

      - name: Save Docker image
        env:
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          mkdir -p /tmp/${{ env.IMAGE_NAME }}
          docker save --output /tmp/${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG }}.tar $IMAGE_NAME:$IMAGE_TAG

      - name: Generate artifact name
        env:
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: set -x; echo "ARTIFACT_NAME=${IMAGE_NAME////_}_${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Cache image
        id: cache
        env:
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}_${{ env.ARTIFACT_NAME }}
          path: /tmp/${{ env.IMAGE_NAME }}

  push-to-ghcr:
    name: Push image to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: build
    env:
      GHCR_REGISTRY: ghcr.io
      GHCR_IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get tag and set env
        run: set -x; echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Get Latest Tag
        id: latest_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 1.0.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate artifact name
        env:
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: set -x; echo "ARTIFACT_NAME=${IMAGE_NAME////_}_${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Cache image
        id: cache
        env:
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}_${{ env.ARTIFACT_NAME }}
          path: /tmp/${{ env.IMAGE_NAME }}

      - name: Load Docker image
        env:
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker load --input /tmp/${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG }}.tar

      - name: Login to GitHub Container Registry
        id: login-ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: '[main] Tag and push image to GitHub Packages'
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          BUILD_IMAGE_NAME: ${{ github.repository }}
          BUILD_IMAGE_TAG: ${{ github.sha }}
          PUSH_REGISTRY: ${{ env.GHCR_REGISTRY }}
          PUSH_IMAGE_NAME: ${{ env.GHCR_IMAGE_NAME }}
          PUSH_IMAGE_TAG: main
        run: |
          docker tag $BUILD_IMAGE_NAME:$BUILD_IMAGE_TAG $PUSH_REGISTRY/$PUSH_IMAGE_NAME:$PUSH_IMAGE_TAG
          docker push $PUSH_REGISTRY/$PUSH_IMAGE_NAME:$PUSH_IMAGE_TAG

      - name: '[develop] Tag and push image to GitHub Packages'
        if: ${{ github.ref == 'refs/heads/develop' }}
        env:
          BUILD_IMAGE_NAME: ${{ github.repository }}
          BUILD_IMAGE_TAG: ${{ github.sha }}
          PUSH_REGISTRY: ${{ env.GHCR_REGISTRY }}
          PUSH_IMAGE_NAME: ${{ env.GHCR_IMAGE_NAME }}
          PUSH_IMAGE_TAG: develop
        run: |
          docker tag $BUILD_IMAGE_NAME:$BUILD_IMAGE_TAG $PUSH_REGISTRY/$PUSH_IMAGE_NAME:$PUSH_IMAGE_TAG
          docker push $PUSH_REGISTRY/$PUSH_IMAGE_NAME:$PUSH_IMAGE_TAG

      - name: '[version] Tag and push image to GitHub Packages'
        if: startsWith(github.ref, 'refs/tags/')
        env:
          BUILD_IMAGE_NAME: ${{ github.repository }}
          BUILD_IMAGE_TAG: ${{ github.sha }}
          PUSH_REGISTRY: ${{ env.GHCR_REGISTRY }}
          PUSH_IMAGE_NAME: ${{ env.GHCR_IMAGE_NAME }}
          PUSH_IMAGE_TAG: ${{ env.RELEASE_VERSION }}
        run: |
          docker tag $BUILD_IMAGE_NAME:$BUILD_IMAGE_TAG $PUSH_REGISTRY/$PUSH_IMAGE_NAME:$PUSH_IMAGE_TAG
          docker push $PUSH_REGISTRY/$PUSH_IMAGE_NAME:$PUSH_IMAGE_TAG

      - name: '[latest] Tag and push image to GitHub Packages'
        if: startsWith(github.ref, 'refs/tags/') && steps.latest_tag.outputs.tag == env.RELEASE_VERSION
        env:
          BUILD_IMAGE_NAME: ${{ github.repository }}
          BUILD_IMAGE_TAG: ${{ github.sha }}
          PUSH_REGISTRY: ${{ env.GHCR_REGISTRY }}
          PUSH_IMAGE_NAME: ${{ env.GHCR_IMAGE_NAME }}
          PUSH_IMAGE_TAG: latest
        run: |
          docker tag $BUILD_IMAGE_NAME:$BUILD_IMAGE_TAG $PUSH_REGISTRY/$PUSH_IMAGE_NAME:$PUSH_IMAGE_TAG
          docker push $PUSH_REGISTRY/$PUSH_IMAGE_NAME:$PUSH_IMAGE_TAG
